name: reflection
version: 1.5.1.1
id: reflection-1.5.1.1-3ed6e2280f933e9a9e8fdd307fae1e08
license: BSD3
copyright: 2009-2013 Edward A. Kmett,
           2012 Elliott Hird,
           2004 Oleg Kiselyov and Chung-chieh Shan
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: experimental
homepage: http://github.com/ekmett/reflection
package-url:
synopsis: Reifies arbitrary terms into types that can be reflected back into terms
description: This package addresses the /configuration problem/ which is
             propogating configurations that are available at run-time, allowing
             multible configurations to coexist without resorting to mutable
             global variables or 'System.IO.Unsafe.unsafePerformIO'.
             .
             An example is modular arithmetic where the modulus itself can be
             supplied at run-time:
             .
             @
             foo :: Modular s => Modulus s
             foo = 1000 * 1000 * 5 + 2000
             @
             >>> withModulus 1280 foo
             1040
             .
             given the following setup:
             .
             @
             &#123;-# LANGUAGE ScopedTypeVariables, RankNTypes, ConstraintKinds, FlexibleContexts, UndecidableInstances #-&#125;
             .
             import Data.Proxy      (Proxy(Proxy))
             import Data.Reflection (Reifies, reflect, reify)
             @
             .
             and definitions:
             .
             @
             data Modulus s = M &#123; getModulus :: Integer &#125;
             type Modular s = 'Data.Reflection.Reifies' s Integer
             .
             normalize :: forall s. Modular s => Integer -> Modulus s
             normalize n = M (mod n modulus) where
             &#x20;  modulus = 'Data.Reflection.reflect' ('Data.Proxy.Proxy' :: 'Data.Proxy.Proxy' s)
             .
             instance Modular s => Num (Modulus s) where
             &#x20;  M a + M b = normalize (a + b)
             &#x20;  M a * M b = normalize (a * b)
             .
             withModulus :: Integer -> (forall s. Modular s => Modulus s) -> Integer
             withModulus m v = 'Data.Reflection.reify' m (getModulus . asProxyOf v)
             &#x20;  where
             &#x20;  asProxyOf :: f s -> Proxy s -> f s
             &#x20;  asProxyOf = const
             @
             .
             That package is an implementation of the ideas presented in the
             paper \"Functional Pearl: Implicit Configurations\" by Oleg Kiselyov
             and Chung-chieh Shan (<http://okmij.org/ftp/Haskell/tr-15-04.pdf original paper>). However, the API has been streamlined to improve
             performance.
             .
             Austin Seipp's tutorial <https://www.fpcomplete.com/user/thoughtpolice/using-reflection Reflecting values to types and back> provides a summary of the
             approach taken by this library, along with more motivating
             examples.
category: Data, Reflection, Dependent Types
author: Edward A. Kmett, Elliott Hird, Oleg Kiselyov and Chung-chieh Shan
exposed: True
exposed-modules: Data.Reflection
hidden-modules:
trusted: False
import-dirs: /home/mdietz/Documents/Projects/GitHub/asteroids/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/reflection-1.5.1.1
library-dirs: /home/mdietz/Documents/Projects/GitHub/asteroids/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/reflection-1.5.1.1
hs-libraries: HSreflection-1.5.1.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
         template-haskell-2.9.0.0-6d27c2b362b15abb1822f2f34b9ae7f9
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/mdietz/Documents/Projects/GitHub/asteroids/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/reflection-1.5.1.1/html/reflection.haddock
haddock-html: /home/mdietz/Documents/Projects/GitHub/asteroids/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/reflection-1.5.1.1/html
